import os
from aiogram import Bot, types
from aiogram.types import Message
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.executor import start_webhook
import logging
import psycopg2
from urllib.parse import urlparse

# bot initialization
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# admin id define
admin = os.getenv('ADMIN_ID')

# webhook settings
APP_NAME = os.getenv('APP_NAME')
WEBHOOK_HOST = f'https://{APP_NAME}.herokuapp.com'
WEBHOOK_PATH = '/webhook/' + BOT_TOKEN
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv("PORT", default=8000))

# database setup
DB_URL = os.getenv('DATABASE_URL')
db_parse = urlparse(DB_URL)
db_username = db_parse.username
db_password = db_parse.password
db_name = db_parse.path[1:]
db_hostname = db_parse.hostname
db_port = db_parse.port
conn = psycopg2.connect(
    database=db_name,
    user=db_username,
    password=db_password,
    host=db_hostname,
    port=db_port
)
cur = conn.cursor()
'''
Database structure:
- "*" means preset value 
column(0): id; integer (default = -1)
*column(1): username; char(300)
*column(2): full_name; char(300)
*column(3): wallet_id; char(64) (contains lolcoin wallet id of len 64)
column(4): balance; integer (default = 0)
column(5): is_active; boolean (default = false)
'''


# states initialization
class SG(StatesGroup):
    ReportState = State()


# keyboard initialization
reportkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
reportkb.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'))


# main part with all bot commands
async def on_startup(dispatcher):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(dispatcher):
    logging.warning('Shutting down..')
    await bot.delete_webhook()
    conn.close()
    # await dp.storage.close()
    # await dp.storage.wait_closed()
    logging.warning('Bye!')


async def help_message(message: Message):
    await message.answer('–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /balance.\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                         '—Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /services.\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, '
                         '–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /fag, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–¥–∞–π—Ç–µ '
                         '–≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –≤—Å—ë —Ç–æ–≥–æ –∂–µ /report.\n–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —ç—Ç–æ '
                         '—Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /help.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É '
                         '–≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.')


@dp.message_handler(commands=['start'])
async def start(message: Message):
    username = '@' + message.from_user.username
    cur.execute(f"""SELECT * FROM users WHERE username = '{username}'""")
    result = cur.fetchone()
    if not result:
        username = message.from_user.first_name + ' ' + message.from_user.last_name
        cur.execute(f"""SELECT * FROM users WHERE username = '{username}'""")
        result = cur.fetchone()
    if result:
        if not result[5]:
            cur.execute(
                f"""UPDATE users SET is_active = true WHERE username = '{username}'"""
            )
            cur.execute(
                f"""UPDATE users SET id = {message.from_user.id} WHERE username = '{username}'"""
            )
            conn.commit()
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {result[1]}! –ú—ã –æ–ø—Ä–µ–¥–µ–∏–ª–∏ –≤–∞—Å, –∫–∞–∫ {result[2].strip()}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫'
                                 f', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report. –ï—Å–ª–∏ '
                                 f'—ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —á—É–∂–æ–º—É –∫–æ—à–µ–ª—å–∫—É –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –≤–∞—à '
                                 f'–±–∞–ª–∞–Ω—Å.')
            await help_message(message)
            await message.answer('–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üôÉ')
        else:
            if result[0] != message.from_user.id:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –Ω–∞–∫–ª–∞–¥–∫–∞, –≤–∏–¥–∏–º–æ —É –≤–∞—Å —Å–æ–≤–ø–∞–ª –Ω–∏–∫ –≤ '
                                     '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–µ —Å –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ '
                                     '—Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report, —á—Ç–æ–±—ã –º—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç—É –æ—à–∏–±–∫—É.')
            else:
                await message.answer(f'–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {result[1]}!')
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –∫–∞–∫ —É—á–µ–Ω–∏–∫–∞ –ª–∞–≥–µ—Ä—è –õ–û–õ. –£–≤—ã, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ '
                             '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç –∫–∞–∂–¥–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                             '–∫–æ–º–∞–Ω–¥—ã /report')


@dp.message_handler(commands=['help'])
@dp.message_handler(content_types=['text'], text='–ö–æ–º–∞–Ω–¥—ã')
async def help_command(message: Message):
    await help_message(message)


@dp.message_handler(commands=['report'])
@dp.message_handler(content_types=['text'], text='–ñ–∞–ª–æ–±–∞')
async def report_command(message: Message):
    await SG.ReportState.set()
    await message.answer('–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                         '/cancel, –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –≤ –≤–∞—à–µ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=reportkb)


@dp.message_handler(state=SG.ReportState)
async def report_send(message: Message, state: FSMContext):
    if message.text == '/cancel' or message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await state.finish()
    else:
        await bot.send_message(admin, message.text)
        await message.answer('–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ')


'''
@dp.message_handler()
async def echo(message: Message):
    await message.answer(message.text)
'''

# bot start
if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
