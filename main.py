import os
from aiogram import Bot, types, executor
from aiogram.types import Message
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.executor import start_webhook
import logging
import psycopg2
from urllib.parse import urlparse
from transactions_parser import parsing
import asyncio
import datetime
# from dotenv import load_dotenv
# load_dotenv()

# Bot initialization
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# Admin id define
admin = os.getenv('ADMIN_ID')

# Database setup
DB_URL = os.getenv('DATABASE_URL')
db_parse = urlparse(DB_URL)
db_username = db_parse.username
db_password = db_parse.password
db_name = db_parse.path[1:]
db_hostname = db_parse.hostname
db_port = db_parse.port
conn = psycopg2.connect(
    database=db_name,
    user=db_username,
    password=db_password,
    host=db_hostname,
    port=db_port
)
cur = conn.cursor()
'''
Database structure:
- "*" means preset value 
column(0): id; integer (default = -1)
*column(1): username; char(300)
*column(2): full_name; char(300)
*column(3): wallet_id; char(64) (contains lolcoin wallet id of len 64)
column(4): balance; integer (default = 0)
column(5): is_active; boolean (default = false)
'''


# States initialization
class SG(StatesGroup):
    BasicState = State()
    ReportState = State()


# Keyboards initialization
reportkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
reportkb.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'))

basekb = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = types.InlineKeyboardButton(text='–ë–∞–ª–∞–Ω—Å üí∏')
button2 = types.InlineKeyboardButton(text="–ñ–∞–ª–æ–±–∞ ‚ùó")
button3 = types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π üìÑ')
button4 = types.InlineKeyboardButton(text='–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É üìù')
button5 = types.InlineKeyboardButton(text='–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üí∞')
button6 = types.InlineKeyboardButton(text='–¢–µ–∫—É—â–∏–µ —Å–¥–µ–ª–∫–∏ üíº')
button7 = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã ‚ùî")
button8 = types.InlineKeyboardButton(text="FAQ ‚ùì")
basekb.row(button1, button2).row(button3, button4).row(button5, button6).row(button7, button8)


# Switching state and keyboard to basic function
async def switch_to_base(message: Message):
    await SG.BasicState.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å–≤—Ç–∏–µ:", reply_markup=basekb)


# Main part with all bot commands:


# Sending commands list function
async def help_message(message: Message):
    await message.answer('- –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /balance.\n'
                         '- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /services.\n'
                         '- –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é /buy.\n'
                         '- –ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell. \n'
                         '- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–∏—Ö —Å–¥–µ–ª–æ–∫ –æ—Å—É—à–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–¥–æ–π /status \n'
                         '- –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /faq, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º'
                         ' —Å–ª—É—á–∞–µ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –≤—Å—ë —Ç–æ–≥–æ –∂–µ /report.'
                         '- –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /help.\n'
                         '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.')


# Checking if user is in db when starting using bot. If he is not,
# he won't be able to use bot commands until admin add him to users table.
@dp.message_handler()
async def start(message: Message):
    username = '@' + message.from_user.username
    cur.execute(f"""SELECT * FROM users WHERE username = '{username}'""")
    result = cur.fetchone()
    if not result:
        username = message.from_user.first_name + ' ' + message.from_user.last_name
        cur.execute(f"""SELECT * FROM users WHERE username = '{username}'""")
        result = cur.fetchone()
    if result:
        if not result[5]:
            cur.execute(
                f"""UPDATE users SET is_active = true WHERE username = '{username}'"""
            )
            cur.execute(
                f"""UPDATE users SET id = {message.from_user.id} WHERE username = '{username}'"""
            )
            conn.commit()
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {result[1]}! –ú—ã –æ–ø—Ä–µ–¥–µ–∏–ª–∏ –≤–∞—Å, –∫–∞–∫ {result[2].strip()}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫'
                                 f', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report. –ï—Å–ª–∏ '
                                 f'—ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —á—É–∂–æ–º—É –∫–æ—à–µ–ª—å–∫—É –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –≤–∞—à '
                                 f'–±–∞–ª–∞–Ω—Å.')
            await help_message(message)
            await message.answer('–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üôÉ')
            await switch_to_base(message)
        else:
            if result[0] != message.from_user.id:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –Ω–∞–∫–ª–∞–¥–∫–∞, –≤–∏–¥–∏–º–æ —É –≤–∞—Å —Å–æ–≤–ø–∞–ª –Ω–∏–∫ –≤ '
                                     '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–µ —Å –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ '
                                     '—Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report, —á—Ç–æ–±—ã –º—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç—É –æ—à–∏–±–∫—É.')
            else:
                await message.answer(f'–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {result[1]}! –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ '
                                     f'–æ–±–æ—Ä–≤–∞–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –æ–±—Ä–∞–Ω–æ...')
                await switch_to_base(message)
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –∫–∞–∫ —É—á–µ–Ω–∏–∫–∞ –ª–∞–≥–µ—Ä—è –õ–û–õ. –£–≤—ã, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ '
                             '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç –∫–∞–∂–¥–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                             '–∫–æ–º–∞–Ω–¥—ã /report')


# Checking balance command
@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ë–∞–ª–∞–Ω—Å üí∏', '/balance'])
async def balance_command(message: Message):
    cur.execute(f"""SELECT balance FROM users WHERE id = '{message.from_user.id}'""")
    user_balance = float(cur.fetchone()[0]) / 100
    await message.answer(f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {user_balance} lolcoin\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ—Ç 2 lolcoin –Ω–∞ '
                         f'lolcoin_platform.near. –ü—Ä–∏ –ª—é–±–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ 1 lolcoin –±—É–¥–µ—Ç –≤–∑—è—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∏—Å—Å–∏–∏, '
                         f'–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö 5-—Ç–∏ –º–∏–Ω—É—Ç '
                         f'—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ï—Å–ª–∏ '
                         f'–∂–µ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ –º–µ–Ω–µ–µ 2 lolcoin, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ '
                         f'–ø—Ä–æ–±–ª–µ–º–µ —á–µ—Ä–µ–∑ /report.')


# Report command
@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ñ–∞–ª–æ–±–∞ ‚ùó', '/report'])
async def report_command(message: Message):
    await SG.ReportState.set()
    await message.answer('–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                         '/cancel, –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –≤ –≤–∞—à–µ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
                         reply_markup=reportkb)


@dp.message_handler(state=SG.ReportState)
async def report_send(message: Message):
    if message.text == '/cancel' or message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        await bot.send_message(admin, message.text)
        await message.answer('–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ')
        await switch_to_base(message)


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ö–æ–º–∞–Ω–¥—ã ‚ùî', '/help'])
async def help_command(message: Message):
    await help_message(message)


@dp.message_handler(state=SG.BasicState)
async def unknown_command(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –æ–ø–æ–∑–Ω–∞–Ω–∞.")


# Checking for new transfer every "wait_for" seconds
async def check(wait_for):
    print("Debug: check is awaited")

    while True:
        print("Debug: inside while")
        await asyncio.sleep(wait_for)
        print("after sleep")
        transactions = parsing()
        if transactions:
            for transaction in transactions:
                logging.warning(transaction["amount"])
                cur.execute(f"""SELECT * FROM users WHERE wallet_id = '{transaction["sender"]}'""")
                result = cur.fetchone()
                if result and transaction["amount"] >= 200:
                    result = [result[0], result[4]]
                    cur.execute(
                        f"""UPDATE users SET balance = {result[1] + transaction["amount"] - 100} WHERE id = '{result[0]}'"""
                    )
                    await bot.send_message(result[0], f"‚úÖ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {transaction['amount'] / 100}"
                                                      f" lolcoin, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö {transaction['amount'] / 100 - 1} –±—ã–ª–∏"
                                                      " –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å, –∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è 1 –õ–û–õ–∫–æ–∏–Ω –≤–∑—è—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ"
                                                      " –∫–æ–º–∏—Å—Å–∏–∏.")
            conn.commit()


# Bot start
if __name__ == '__main__':
    future = asyncio.ensure_future(check(60))
    executor.start_polling(dp, skip_updates=True)
